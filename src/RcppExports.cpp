// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CPPlwls2d_s1
Eigen::MatrixXd CPPlwls2d_s1(const double& bw, const std::string kernel_type, const Eigen::Map<Eigen::VectorXd>& win, const Eigen::Map<Eigen::MatrixXd>& tin, const Eigen::Map<Eigen::VectorXd>& yin, const Eigen::Map<Eigen::MatrixXd>& xin, const Eigen::Map<Eigen::MatrixXd>& zin, const Eigen::Map<Eigen::MatrixXd>& tout, const unsigned int& npoly, const unsigned int& nder);
RcppExport SEXP _SVCJP_CPPlwls2d_s1(SEXP bwSEXP, SEXP kernel_typeSEXP, SEXP winSEXP, SEXP tinSEXP, SEXP yinSEXP, SEXP xinSEXP, SEXP zinSEXP, SEXP toutSEXP, SEXP npolySEXP, SEXP nderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type win(winSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tin(tinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xin(xinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type zin(zinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tout(toutSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type npoly(npolySEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type nder(nderSEXP);
    rcpp_result_gen = Rcpp::wrap(CPPlwls2d_s1(bw, kernel_type, win, tin, yin, xin, zin, tout, npoly, nder));
    return rcpp_result_gen;
END_RCPP
}
// CPPlwls2d_s2
Eigen::MatrixXd CPPlwls2d_s2(const double& bw, const std::string kernel_type, const Eigen::Map<Eigen::VectorXd>& win, const Eigen::Map<Eigen::MatrixXd>& tin, const Eigen::Map<Eigen::VectorXd>& yin, const Eigen::Map<Eigen::MatrixXd>& xin, const Eigen::Map<Eigen::MatrixXd>& tout, const unsigned int& npoly, const unsigned int& nder);
RcppExport SEXP _SVCJP_CPPlwls2d_s2(SEXP bwSEXP, SEXP kernel_typeSEXP, SEXP winSEXP, SEXP tinSEXP, SEXP yinSEXP, SEXP xinSEXP, SEXP toutSEXP, SEXP npolySEXP, SEXP nderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type win(winSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tin(tinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xin(xinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tout(toutSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type npoly(npolySEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type nder(nderSEXP);
    rcpp_result_gen = Rcpp::wrap(CPPlwls2d_s2(bw, kernel_type, win, tin, yin, xin, tout, npoly, nder));
    return rcpp_result_gen;
END_RCPP
}
// CPPlwls2d_s2_LR
Eigen::MatrixXd CPPlwls2d_s2_LR(const double& bw, const std::string kernel_type, const Eigen::Map<Eigen::VectorXd>& win, const Eigen::Map<Eigen::MatrixXd>& tin, const Eigen::Map<Eigen::VectorXd>& yin, const Eigen::Map<Eigen::MatrixXd>& xin, const Eigen::Map<Eigen::MatrixXd>& tout, const unsigned int& npoly, const unsigned int& nder);
RcppExport SEXP _SVCJP_CPPlwls2d_s2_LR(SEXP bwSEXP, SEXP kernel_typeSEXP, SEXP winSEXP, SEXP tinSEXP, SEXP yinSEXP, SEXP xinSEXP, SEXP toutSEXP, SEXP npolySEXP, SEXP nderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type win(winSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tin(tinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type xin(xinSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tout(toutSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type npoly(npolySEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type nder(nderSEXP);
    rcpp_result_gen = Rcpp::wrap(CPPlwls2d_s2_LR(bw, kernel_type, win, tin, yin, xin, tout, npoly, nder));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SVCJP_CPPlwls2d_s1", (DL_FUNC) &_SVCJP_CPPlwls2d_s1, 10},
    {"_SVCJP_CPPlwls2d_s2", (DL_FUNC) &_SVCJP_CPPlwls2d_s2, 9},
    {"_SVCJP_CPPlwls2d_s2_LR", (DL_FUNC) &_SVCJP_CPPlwls2d_s2_LR, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_SVCJP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
